package com.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.android.db.MasterQuestions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MASTER_QUESTIONS.
*/
public class MasterQuestionsDao extends AbstractDao<MasterQuestions, Void> {

    public static final String TABLENAME = "MASTER_QUESTIONS";

    /**
     * Properties of entity MasterQuestions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Question_id = new Property(0, String.class, "question_id", false, "QUESTION_ID");
        public final static Property Question = new Property(1, String.class, "question", false, "QUESTION");
        public final static Property Company_id = new Property(2, String.class, "company_id", false, "COMPANY_ID");
        public final static Property Is_mandatory = new Property(3, String.class, "is_mandatory", false, "IS_MANDATORY");
        public final static Property Sequence = new Property(4, String.class, "sequence", false, "SEQUENCE");
        public final static Property Question_type = new Property(5, String.class, "question_type", false, "QUESTION_TYPE");
        public final static Property Question_option = new Property(6, String.class, "question_option", false, "QUESTION_OPTION");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property Is_published = new Property(8, String.class, "is_published", false, "IS_PUBLISHED");
        public final static Property Answer = new Property(9, String.class, "answer", false, "ANSWER");
        public final static Property Qrcode = new Property(10, String.class, "qrcode", false, "QRCODE");
    };


    public MasterQuestionsDao(DaoConfig config) {
        super(config);
    }
    
    public MasterQuestionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MASTER_QUESTIONS' (" + //
                "'QUESTION_ID' TEXT," + // 0: question_id
                "'QUESTION' TEXT," + // 1: question
                "'COMPANY_ID' TEXT," + // 2: company_id
                "'IS_MANDATORY' TEXT," + // 3: is_mandatory
                "'SEQUENCE' TEXT," + // 4: sequence
                "'QUESTION_TYPE' TEXT," + // 5: question_type
                "'QUESTION_OPTION' TEXT," + // 6: question_option
                "'REMARK' TEXT," + // 7: remark
                "'IS_PUBLISHED' TEXT," + // 8: is_published
                "'ANSWER' TEXT," + // 9: answer
                "'QRCODE' TEXT);"); // 10: qrcode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MASTER_QUESTIONS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MasterQuestions entity) {
        stmt.clearBindings();
 
        String question_id = entity.getQuestion_id();
        if (question_id != null) {
            stmt.bindString(1, question_id);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(2, question);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(3, company_id);
        }
 
        String is_mandatory = entity.getIs_mandatory();
        if (is_mandatory != null) {
            stmt.bindString(4, is_mandatory);
        }
 
        String sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindString(5, sequence);
        }
 
        String question_type = entity.getQuestion_type();
        if (question_type != null) {
            stmt.bindString(6, question_type);
        }
 
        String question_option = entity.getQuestion_option();
        if (question_option != null) {
            stmt.bindString(7, question_option);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String is_published = entity.getIs_published();
        if (is_published != null) {
            stmt.bindString(9, is_published);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(10, answer);
        }
 
        String qrcode = entity.getQrcode();
        if (qrcode != null) {
            stmt.bindString(11, qrcode);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MasterQuestions readEntity(Cursor cursor, int offset) {
        MasterQuestions entity = new MasterQuestions( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // question_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // question
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // company_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // is_mandatory
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sequence
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // question_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // question_option
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // is_published
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // answer
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // qrcode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MasterQuestions entity, int offset) {
        entity.setQuestion_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setQuestion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompany_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIs_mandatory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSequence(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuestion_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQuestion_option(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIs_published(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAnswer(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setQrcode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MasterQuestions entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MasterQuestions entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
