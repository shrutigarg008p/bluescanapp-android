package com.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.android.db.Site;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SITE.
*/
public class SiteDao extends AbstractDao<Site, String> {

    public static final String TABLENAME = "SITE";

    /**
     * Properties of entity Site.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Site_id = new Property(0, String.class, "site_id", true, "SITE_ID");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Zipcode = new Property(2, String.class, "zipcode", false, "ZIPCODE");
        public final static Property City = new Property(3, String.class, "city", false, "CITY");
        public final static Property EmailId = new Property(4, String.class, "emailId", false, "EMAIL_ID");
        public final static Property ContactPerson = new Property(5, String.class, "contactPerson", false, "CONTACT_PERSON");
        public final static Property ContactNumber = new Property(6, String.class, "contactNumber", false, "CONTACT_NUMBER");
        public final static Property BranchId = new Property(7, String.class, "branchId", false, "BRANCH_ID");
        public final static Property BranchName = new Property(8, String.class, "branchName", false, "BRANCH_NAME");
        public final static Property CustomerName = new Property(9, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property CompanyName = new Property(10, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property User_id = new Property(11, String.class, "user_id", false, "USER_ID");
        public final static Property SiteVisitingId = new Property(12, String.class, "siteVisitingId", false, "SITE_VISITING_ID");
    };


    public SiteDao(DaoConfig config) {
        super(config);
    }
    
    public SiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SITE' (" + //
                "'SITE_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: site_id
                "'ADDRESS' TEXT," + // 1: address
                "'ZIPCODE' TEXT," + // 2: zipcode
                "'CITY' TEXT," + // 3: city
                "'EMAIL_ID' TEXT," + // 4: emailId
                "'CONTACT_PERSON' TEXT," + // 5: contactPerson
                "'CONTACT_NUMBER' TEXT," + // 6: contactNumber
                "'BRANCH_ID' TEXT," + // 7: branchId
                "'BRANCH_NAME' TEXT," + // 8: branchName
                "'CUSTOMER_NAME' TEXT," + // 9: customerName
                "'COMPANY_NAME' TEXT," + // 10: companyName
                "'USER_ID' TEXT," + // 11: user_id
                "'SITE_VISITING_ID' TEXT);"); // 12: siteVisitingId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SITE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Site entity) {
        stmt.clearBindings();
 
        String site_id = entity.getSite_id();
        if (site_id != null) {
            stmt.bindString(1, site_id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        String zipcode = entity.getZipcode();
        if (zipcode != null) {
            stmt.bindString(3, zipcode);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String emailId = entity.getEmailId();
        if (emailId != null) {
            stmt.bindString(5, emailId);
        }
 
        String contactPerson = entity.getContactPerson();
        if (contactPerson != null) {
            stmt.bindString(6, contactPerson);
        }
 
        String contactNumber = entity.getContactNumber();
        if (contactNumber != null) {
            stmt.bindString(7, contactNumber);
        }
 
        String branchId = entity.getBranchId();
        if (branchId != null) {
            stmt.bindString(8, branchId);
        }
 
        String branchName = entity.getBranchName();
        if (branchName != null) {
            stmt.bindString(9, branchName);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(10, customerName);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(11, companyName);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(12, user_id);
        }
 
        String siteVisitingId = entity.getSiteVisitingId();
        if (siteVisitingId != null) {
            stmt.bindString(13, siteVisitingId);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Site readEntity(Cursor cursor, int offset) {
        Site entity = new Site( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // site_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // address
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zipcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // emailId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contactPerson
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contactNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // branchId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // branchName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // customerName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // companyName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // user_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // siteVisitingId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Site entity, int offset) {
        entity.setSite_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZipcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmailId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContactPerson(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContactNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBranchId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBranchName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCustomerName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompanyName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUser_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSiteVisitingId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Site entity, long rowId) {
        return entity.getSite_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Site entity) {
        if(entity != null) {
            return entity.getSite_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
