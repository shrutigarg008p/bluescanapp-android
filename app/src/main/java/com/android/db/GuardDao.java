package com.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.android.db.Guard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GUARD.
*/
public class GuardDao extends AbstractDao<Guard, Long> {

    public static final String TABLENAME = "GUARD";

    /**
     * Properties of entity Guard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Guard_id = new Property(1, String.class, "guard_id", false, "GUARD_ID");
        public final static Property Company_id = new Property(2, String.class, "company_id", false, "COMPANY_ID");
        public final static Property First_name = new Property(3, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Last_name = new Property(4, String.class, "last_name", false, "LAST_NAME");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Mobile = new Property(6, String.class, "mobile", false, "MOBILE");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property Zip = new Property(8, String.class, "zip", false, "ZIP");
        public final static Property Post = new Property(9, String.class, "post", false, "POST");
        public final static Property Technical_qualification = new Property(10, String.class, "technical_qualification", false, "TECHNICAL_QUALIFICATION");
        public final static Property Language_known = new Property(11, String.class, "language_known", false, "LANGUAGE_KNOWN");
        public final static Property Experience = new Property(12, String.class, "experience", false, "EXPERIENCE");
        public final static Property Passcode = new Property(13, String.class, "passcode", false, "PASSCODE");
        public final static Property Pf_no = new Property(14, String.class, "pf_no", false, "PF_NO");
        public final static Property Esi_no = new Property(15, String.class, "esi_no", false, "ESI_NO");
        public final static Property Status = new Property(16, String.class, "status", false, "STATUS");
        public final static Property Is_deleted = new Property(17, String.class, "is_deleted", false, "IS_DELETED");
        public final static Property Created_by = new Property(18, String.class, "created_by", false, "CREATED_BY");
        public final static Property Created_date = new Property(19, java.util.Date.class, "created_date", false, "CREATED_DATE");
        public final static Property Qr_code = new Property(20, String.class, "qr_code", false, "QR_CODE");
        public final static Property Site_id = new Property(21, String.class, "site_id", false, "SITE_ID");
        public final static Property CompanyName = new Property(22, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property User_id = new Property(23, String.class, "user_id", false, "USER_ID");
        public final static Property SiteVisitingId = new Property(24, String.class, "siteVisitingId", false, "SITE_VISITING_ID");
        public final static Property Img_url = new Property(25, String.class, "img_url", false, "IMG_URL");
        public final static Property Designation = new Property(26, String.class, "designation", false, "DESIGNATION");
    };


    public GuardDao(DaoConfig config) {
        super(config);
    }
    
    public GuardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GUARD' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'GUARD_ID' TEXT," + // 1: guard_id
                "'COMPANY_ID' TEXT," + // 2: company_id
                "'FIRST_NAME' TEXT," + // 3: first_name
                "'LAST_NAME' TEXT," + // 4: last_name
                "'PHONE' TEXT," + // 5: phone
                "'MOBILE' TEXT," + // 6: mobile
                "'ADDRESS' TEXT," + // 7: address
                "'ZIP' TEXT," + // 8: zip
                "'POST' TEXT," + // 9: post
                "'TECHNICAL_QUALIFICATION' TEXT," + // 10: technical_qualification
                "'LANGUAGE_KNOWN' TEXT," + // 11: language_known
                "'EXPERIENCE' TEXT," + // 12: experience
                "'PASSCODE' TEXT," + // 13: passcode
                "'PF_NO' TEXT," + // 14: pf_no
                "'ESI_NO' TEXT," + // 15: esi_no
                "'STATUS' TEXT," + // 16: status
                "'IS_DELETED' TEXT," + // 17: is_deleted
                "'CREATED_BY' TEXT," + // 18: created_by
                "'CREATED_DATE' INTEGER," + // 19: created_date
                "'QR_CODE' TEXT," + // 20: qr_code
                "'SITE_ID' TEXT," + // 21: site_id
                "'COMPANY_NAME' TEXT," + // 22: companyName
                "'USER_ID' TEXT," + // 23: user_id
                "'SITE_VISITING_ID' TEXT," + // 24: siteVisitingId
                "'IMG_URL' TEXT," + // 25: img_url
                "'DESIGNATION' TEXT);"); // 26: designation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GUARD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Guard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String guard_id = entity.getGuard_id();
        if (guard_id != null) {
            stmt.bindString(2, guard_id);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(3, company_id);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(4, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(5, last_name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(9, zip);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(10, post);
        }
 
        String technical_qualification = entity.getTechnical_qualification();
        if (technical_qualification != null) {
            stmt.bindString(11, technical_qualification);
        }
 
        String language_known = entity.getLanguage_known();
        if (language_known != null) {
            stmt.bindString(12, language_known);
        }
 
        String experience = entity.getExperience();
        if (experience != null) {
            stmt.bindString(13, experience);
        }
 
        String passcode = entity.getPasscode();
        if (passcode != null) {
            stmt.bindString(14, passcode);
        }
 
        String pf_no = entity.getPf_no();
        if (pf_no != null) {
            stmt.bindString(15, pf_no);
        }
 
        String esi_no = entity.getEsi_no();
        if (esi_no != null) {
            stmt.bindString(16, esi_no);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(17, status);
        }
 
        String is_deleted = entity.getIs_deleted();
        if (is_deleted != null) {
            stmt.bindString(18, is_deleted);
        }
 
        String created_by = entity.getCreated_by();
        if (created_by != null) {
            stmt.bindString(19, created_by);
        }
 
        java.util.Date created_date = entity.getCreated_date();
        if (created_date != null) {
            stmt.bindLong(20, created_date.getTime());
        }
 
        String qr_code = entity.getQr_code();
        if (qr_code != null) {
            stmt.bindString(21, qr_code);
        }
 
        String site_id = entity.getSite_id();
        if (site_id != null) {
            stmt.bindString(22, site_id);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(23, companyName);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(24, user_id);
        }
 
        String siteVisitingId = entity.getSiteVisitingId();
        if (siteVisitingId != null) {
            stmt.bindString(25, siteVisitingId);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(26, img_url);
        }
 
        String designation = entity.getDesignation();
        if (designation != null) {
            stmt.bindString(27, designation);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Guard readEntity(Cursor cursor, int offset) {
        Guard entity = new Guard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // guard_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // company_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // first_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // last_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zip
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // post
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // technical_qualification
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // language_known
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // experience
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // passcode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pf_no
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // esi_no
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // status
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // is_deleted
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // created_by
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // created_date
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // qr_code
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // site_id
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // companyName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // user_id
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // siteVisitingId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // img_url
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // designation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Guard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGuard_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompany_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirst_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLast_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZip(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPost(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTechnical_qualification(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLanguage_known(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setExperience(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPasscode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPf_no(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEsi_no(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStatus(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIs_deleted(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCreated_by(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreated_date(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setQr_code(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSite_id(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCompanyName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUser_id(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSiteVisitingId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setImg_url(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDesignation(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Guard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Guard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
