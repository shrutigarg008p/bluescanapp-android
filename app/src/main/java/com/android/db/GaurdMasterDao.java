package com.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.android.db.GaurdMaster;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAURD_MASTER.
*/
public class GaurdMasterDao extends AbstractDao<GaurdMaster, String> {

    public static final String TABLENAME = "GAURD_MASTER";

    /**
     * Properties of entity GaurdMaster.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", true, "USER_ID");
        public final static Property Company_id = new Property(1, String.class, "company_id", false, "COMPANY_ID");
        public final static Property First_name = new Property(2, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Last_name = new Property(3, String.class, "last_name", false, "LAST_NAME");
        public final static Property Father_name = new Property(4, String.class, "father_name", false, "FATHER_NAME");
        public final static Property Dob = new Property(5, String.class, "dob", false, "DOB");
        public final static Property Age = new Property(6, String.class, "age", false, "AGE");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Mobile = new Property(8, String.class, "mobile", false, "MOBILE");
        public final static Property L_address = new Property(9, String.class, "l_address", false, "L_ADDRESS");
        public final static Property P_address = new Property(10, String.class, "p_address", false, "P_ADDRESS");
        public final static Property Latitude = new Property(11, String.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(12, String.class, "longitude", false, "LONGITUDE");
        public final static Property Zip = new Property(13, String.class, "zip", false, "ZIP");
        public final static Property User_name = new Property(14, String.class, "user_name", false, "USER_NAME");
        public final static Property Password = new Property(15, String.class, "password", false, "PASSWORD");
        public final static Property Email = new Property(16, String.class, "email", false, "EMAIL");
        public final static Property Status = new Property(17, String.class, "status", false, "STATUS");
        public final static Property Is_deleted = new Property(18, String.class, "is_deleted", false, "IS_DELETED");
        public final static Property Created_by = new Property(19, String.class, "created_by", false, "CREATED_BY");
        public final static Property Created_date = new Property(20, java.util.Date.class, "created_date", false, "CREATED_DATE");
        public final static Property Qr_code = new Property(21, String.class, "qr_code", false, "QR_CODE");
        public final static Property Session_token = new Property(22, String.class, "session_token", false, "SESSION_TOKEN");
        public final static Property Apns_token = new Property(23, String.class, "apns_token", false, "APNS_TOKEN");
        public final static Property Img_url = new Property(24, String.class, "img_url", false, "IMG_URL");
        public final static Property Company_name = new Property(25, String.class, "company_name", false, "COMPANY_NAME");
        public final static Property Site_ids = new Property(26, String.class, "site_ids", false, "SITE_IDS");
        public final static Property Designation = new Property(27, String.class, "designation", false, "DESIGNATION");
    };


    public GaurdMasterDao(DaoConfig config) {
        super(config);
    }
    
    public GaurdMasterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAURD_MASTER' (" + //
                "'USER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: user_id
                "'COMPANY_ID' TEXT," + // 1: company_id
                "'FIRST_NAME' TEXT," + // 2: first_name
                "'LAST_NAME' TEXT," + // 3: last_name
                "'FATHER_NAME' TEXT," + // 4: father_name
                "'DOB' TEXT," + // 5: dob
                "'AGE' TEXT," + // 6: age
                "'PHONE' TEXT," + // 7: phone
                "'MOBILE' TEXT," + // 8: mobile
                "'L_ADDRESS' TEXT," + // 9: l_address
                "'P_ADDRESS' TEXT," + // 10: p_address
                "'LATITUDE' TEXT," + // 11: latitude
                "'LONGITUDE' TEXT," + // 12: longitude
                "'ZIP' TEXT," + // 13: zip
                "'USER_NAME' TEXT," + // 14: user_name
                "'PASSWORD' TEXT," + // 15: password
                "'EMAIL' TEXT," + // 16: email
                "'STATUS' TEXT," + // 17: status
                "'IS_DELETED' TEXT," + // 18: is_deleted
                "'CREATED_BY' TEXT," + // 19: created_by
                "'CREATED_DATE' INTEGER," + // 20: created_date
                "'QR_CODE' TEXT," + // 21: qr_code
                "'SESSION_TOKEN' TEXT," + // 22: session_token
                "'APNS_TOKEN' TEXT," + // 23: apns_token
                "'IMG_URL' TEXT," + // 24: img_url
                "'COMPANY_NAME' TEXT," + // 25: company_name
                "'SITE_IDS' TEXT," + // 26: site_ids
                "'DESIGNATION' TEXT);"); // 27: designation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAURD_MASTER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GaurdMaster entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(2, company_id);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(3, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(4, last_name);
        }
 
        String father_name = entity.getFather_name();
        if (father_name != null) {
            stmt.bindString(5, father_name);
        }
 
        String dob = entity.getDob();
        if (dob != null) {
            stmt.bindString(6, dob);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(7, age);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(9, mobile);
        }
 
        String l_address = entity.getL_address();
        if (l_address != null) {
            stmt.bindString(10, l_address);
        }
 
        String p_address = entity.getP_address();
        if (p_address != null) {
            stmt.bindString(11, p_address);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(12, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(13, longitude);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(14, zip);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(15, user_name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(16, password);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(17, email);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(18, status);
        }
 
        String is_deleted = entity.getIs_deleted();
        if (is_deleted != null) {
            stmt.bindString(19, is_deleted);
        }
 
        String created_by = entity.getCreated_by();
        if (created_by != null) {
            stmt.bindString(20, created_by);
        }
 
        java.util.Date created_date = entity.getCreated_date();
        if (created_date != null) {
            stmt.bindLong(21, created_date.getTime());
        }
 
        String qr_code = entity.getQr_code();
        if (qr_code != null) {
            stmt.bindString(22, qr_code);
        }
 
        String session_token = entity.getSession_token();
        if (session_token != null) {
            stmt.bindString(23, session_token);
        }
 
        String apns_token = entity.getApns_token();
        if (apns_token != null) {
            stmt.bindString(24, apns_token);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(25, img_url);
        }
 
        String company_name = entity.getCompany_name();
        if (company_name != null) {
            stmt.bindString(26, company_name);
        }
 
        String site_ids = entity.getSite_ids();
        if (site_ids != null) {
            stmt.bindString(27, site_ids);
        }
 
        String designation = entity.getDesignation();
        if (designation != null) {
            stmt.bindString(28, designation);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GaurdMaster readEntity(Cursor cursor, int offset) {
        GaurdMaster entity = new GaurdMaster( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // company_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // first_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // last_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // father_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dob
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // age
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mobile
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // l_address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // p_address
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // latitude
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // longitude
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // zip
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // user_name
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // password
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // email
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // status
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // is_deleted
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // created_by
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // created_date
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // qr_code
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // session_token
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // apns_token
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // img_url
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // company_name
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // site_ids
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // designation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GaurdMaster entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCompany_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFirst_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFather_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDob(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAge(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMobile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setL_address(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setP_address(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLatitude(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLongitude(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setZip(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUser_name(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPassword(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEmail(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStatus(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIs_deleted(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreated_by(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCreated_date(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setQr_code(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSession_token(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setApns_token(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setImg_url(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCompany_name(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSite_ids(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setDesignation(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GaurdMaster entity, long rowId) {
        return entity.getUser_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GaurdMaster entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
