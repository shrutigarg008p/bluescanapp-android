package com.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.android.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property EmailId = new Property(1, String.class, "emailId", false, "EMAIL_ID");
        public final static Property Status = new Property(2, String.class, "status", false, "STATUS");
        public final static Property CompanyId = new Property(3, String.class, "companyId", false, "COMPANY_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property RoleId = new Property(5, String.class, "roleId", false, "ROLE_ID");
        public final static Property RoleName = new Property(6, String.class, "roleName", false, "ROLE_NAME");
        public final static Property Code = new Property(7, String.class, "code", false, "CODE");
        public final static Property RegionId = new Property(8, String.class, "regionId", false, "REGION_ID");
        public final static Property BranchId = new Property(9, String.class, "branchId", false, "BRANCH_ID");
        public final static Property SiteId = new Property(10, String.class, "siteId", false, "SITE_ID");
        public final static Property UserTasksIds = new Property(11, String.class, "userTasksIds", false, "USER_TASKS_IDS");
        public final static Property UserTasks = new Property(12, String.class, "userTasks", false, "USER_TASKS");
        public final static Property SessionToken = new Property(13, String.class, "sessionToken", false, "SESSION_TOKEN");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'USER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "'EMAIL_ID' TEXT," + // 1: emailId
                "'STATUS' TEXT," + // 2: status
                "'COMPANY_ID' TEXT," + // 3: companyId
                "'NAME' TEXT," + // 4: name
                "'ROLE_ID' TEXT," + // 5: roleId
                "'ROLE_NAME' TEXT," + // 6: roleName
                "'CODE' TEXT," + // 7: code
                "'REGION_ID' TEXT," + // 8: regionId
                "'BRANCH_ID' TEXT," + // 9: branchId
                "'SITE_ID' TEXT," + // 10: siteId
                "'USER_TASKS_IDS' TEXT," + // 11: userTasksIds
                "'USER_TASKS' TEXT," + // 12: userTasks
                "'SESSION_TOKEN' TEXT);"); // 13: sessionToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String emailId = entity.getEmailId();
        if (emailId != null) {
            stmt.bindString(2, emailId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(3, status);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(4, companyId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(6, roleId);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(7, roleName);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(8, code);
        }
 
        String regionId = entity.getRegionId();
        if (regionId != null) {
            stmt.bindString(9, regionId);
        }
 
        String branchId = entity.getBranchId();
        if (branchId != null) {
            stmt.bindString(10, branchId);
        }
 
        String siteId = entity.getSiteId();
        if (siteId != null) {
            stmt.bindString(11, siteId);
        }
 
        String userTasksIds = entity.getUserTasksIds();
        if (userTasksIds != null) {
            stmt.bindString(12, userTasksIds);
        }
 
        String userTasks = entity.getUserTasks();
        if (userTasks != null) {
            stmt.bindString(13, userTasks);
        }
 
        String sessionToken = entity.getSessionToken();
        if (sessionToken != null) {
            stmt.bindString(14, sessionToken);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // emailId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // companyId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // roleId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // roleName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // code
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // regionId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // branchId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // siteId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userTasksIds
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userTasks
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // sessionToken
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEmailId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoleId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRoleName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegionId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBranchId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSiteId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserTasksIds(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserTasks(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSessionToken(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUserId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
